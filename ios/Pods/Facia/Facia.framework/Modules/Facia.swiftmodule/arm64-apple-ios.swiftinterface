// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name Facia
import AVFoundation
import AVKit
import CoreML
import DeveloperToolsSupport
@_exported import Facia
import Foundation
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import UniformTypeIdentifiers
import Vision
import VisionKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc public class Facia : ObjectiveC.NSObject {
  public var face_detected_oval_color: UIKit.UIColor
  public var face_not_detected_oval_color: UIKit.UIColor
  public var dark_text_color: UIKit.UIColor
  public var light_text_color: UIKit.UIColor
  public var ql_instruction_bg_color: UIKit.UIColor
  public var button_bg_color: UIKit.UIColor
  public var button_text_color: UIKit.UIColor
  public var dialog_button_text_color: UIKit.UIColor
  @objc public func createRequest(parentViewController: UIKit.UIViewController, accessToken: Swift.String, configs: [Swift.String : Any]?, completion: @escaping (_ result: Any) -> ())
  public func checkSimilarity(parentViewController: UIKit.UIViewController, accessToken: Swift.String, faceImage: UIKit.UIImage, idImage: UIKit.UIImage, configs: [Swift.String : Any]?, completion: @escaping (_ result: Any) -> ())
  @objc override dynamic public init()
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (Facia.Reachability) -> ()
  public typealias NetworkUnreachable = (Facia.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: Facia.Reachability.NetworkStatus, b: Facia.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: Facia.Reachability.Connection
    public static func == (a: Facia.Reachability.Connection, b: Facia.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: Facia.Reachability.NetworkReachable?
  public var whenUnreachable: Facia.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: Facia.Reachability.Connection {
    get
  }
  public var connection: Facia.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension Facia.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class NetworkMonitor {
  public static let shared: Facia.NetworkMonitor
  public typealias NetworkStatusChangeHandler = (Swift.Bool) -> Swift.Void
  public var networkStatusChangeHandler: Facia.NetworkMonitor.NetworkStatusChangeHandler?
  @objc deinit
}
@available(*, unavailable, renamed: "Connection")
extension Facia.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension Facia.Reachability.NetworkStatus : Swift.Hashable {}
extension Facia.Reachability.Connection : Swift.Equatable {}
extension Facia.Reachability.Connection : Swift.Hashable {}
