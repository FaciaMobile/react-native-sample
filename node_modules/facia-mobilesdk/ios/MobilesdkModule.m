#import "MobilesdkModule.h"
#import <Facia/Facia-Swift.h>
#import <React/RCTLog.h>
#import <React/RCTUtils.h>

@implementation MobilesdkModule

RCT_EXPORT_MODULE(FaciaReactNativeModule)


RCT_EXPORT_METHOD(testMethod:(NSString *)name location:(NSString *)location)
{
  // Facia *facia = [[Facia alloc] init];
  // RCTLogInfo(@"Pretending to create an event %@ at %@", [facia getUniqueReference] , location);
}


// RCT_EXPORT_METHOD(verify:(NSString *)request auth:(NSString *)auth config:(NSString *)config callback: (RCTResponseSenderBlock) callback)
RCT_EXPORT_METHOD(verify:(NSString *)token config:(NSString *)config callback: (RCTResponseSenderBlock) callback)
{


  Facia *facia = [[Facia alloc] init];
  
  UIViewController* vc = RCTPresentedViewController();
  __block RCTResponseSenderBlock originalCallback = [callback copy];

   NSDictionary *configDict = [self parseJSONString:config];
    NSMutableDictionary *modifiedConfigDict = [configDict mutableCopy];
    modifiedConfigDict[@"platform"] = @"react-native-0.5.9";

  [facia createRequestWithParentViewController:vc
                                        accessToken:token
                                        configs:[self parseJSONString:config]
                                     completion:^(NSDictionary *result) {
        
        NSString *response = [self convertToJSONString:result];
        callback(@[response]);
    }];
}



- (NSDictionary *)parseJSONString:(NSString *)jsonString {
    NSData *jsonData = [jsonString dataUsingEncoding:NSUTF8StringEncoding];
    
    if (jsonData) {
        NSError *error;
        NSDictionary *jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options:kNilOptions error:&error];
        
        if (error) {
            NSLog(@"Error parsing JSON string: %@", error.localizedDescription);
        }
        
        return jsonDictionary;
    }
    
    return nil;
}

- (NSString *)convertToJSONString:(NSDictionary *)dictionary {
    NSError *error;
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:NSJSONWritingPrettyPrinted error:&error];
    
    if (error) {
        NSLog(@"Error converting to JSON string: %@", error.localizedDescription);
        return nil;
    }
    
    NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
    return jsonString;
}


- (dispatch_queue_t)methodQueue
{
  return dispatch_get_main_queue();
}

RCT_EXPORT_BLOCKING_SYNCHRONOUS_METHOD(getName)
{
return [[UIDevice currentDevice] name];
}

RCT_EXPORT_BLOCKING_SYNCHRONOUS_METHOD(getUniqueReference)
{
  // Facia *facia = [[Facia alloc] init];
  // return [facia getUniqueReference];
  return @"reference";
}

- (NSArray<NSString *> *)supportedEvents {
  return @[@"verification.accepted", @"verification.declined", @"request.received", @"request.pending", @"request.unauthorized", @"request.invalid", @"request.timeout", @"permission.denied", @"verification.cancelled"];
}

@end
